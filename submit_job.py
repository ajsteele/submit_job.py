import os
import time

job_name = 'test_job'
memory_request = 1 # GB
runtime = 24 # hours
nodes   = 1 # nodes to request
working_directory = '/home/username'
output_base = '/home/username/output'
use_gpu = False

# if you want to add any extra commands to the SGE script, do so here
custom_sge = """"""

# create a unique output subdirectory under the base directory by concatenating
# the job name and datetime (you might need it to specify output directory in
# your script)
time_suffix = time.strftime('-%Y%m%d-%H%M%S')
output_directory = os.path.join(output_base, job_name + time_suffix)

commands = """echo "Hello, world"
touch """ + output_directory + """/test_file
sleep 10"""

################################################################################
# END USER INPUT ###############################################################
################################################################################

print 'Submitting ' + job_name + '...'

# basic job metadata
job_sh = """# SGE job generated by submit_job.py

#$ -N """        + job_name            + """
#$ -l h_vmem=""" + str(memory_request) + """G
#$ -l tmem="""   + str(memory_request) + """G
#$ -l h_rt="""   + str(runtime)        + """:0:0
"""
if nodes > 1:
	job_sh += """#$ -pe smp """	 + str(nodes) + '\n'

# if you need a GPU node, add the relevant lines
if use_gpu:
	job_sh += """#$ -P gpu
#$ -l gpu=1
"""
# add instructions for job
job_sh += """#$ -S /bin/bash
#$ -wd """ + working_directory + """
#$ -o  """ + os.path.join(output_directory, job_name + time_suffix + '.out') + """
#$ -j y""" + '\n\n'
# if present, add custom SGE from the user
if custom_sge != '':
	job_sh += '\n' + custom_sge + '\n'
# print some basic header info, turn verbose mode on, execute the user's
# commands, disable verbose mode and print footer info when complete
job_sh += """printf "$JOB_NAME $JOB_ID\\n\\n"
hostname
date
printf "\\n\\n"

set -v # verbose mode on
""" + commands + """
set +v # verbose mode off

printf "\\n\\nAll done! Great work!\\n"
printf "Job completed in $SECONDS seconds\\n"
date"""

# check if job path already exists and abort if so to avoid overwriting 
if os.path.exists(output_directory):
	sys.exit('\nJob path ' + output_directory + ' already exists. Try resubmitting in a second...')
# create directory for job
os.mkdir(output_directory)

# write job_sh to a file in the output subdirectory
job_filename = os.path.join(output_directory, job_name + '.sh')
with open(job_filename, 'w') as job_file:
    job_file.write(job_sh)

# submit the job and double-check it started with qstat
print ''
job_submitted = os.system('qsub ' + job_filename)
if job_submitted == 0:
	print 'Job submitted! Here is a summary of your jobs on the cluster:'
	os.system('qstat')
